<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>sn_sc_ansible.AMessage</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>AMessage</name>
        <script><![CDATA[var AMessage = Class.create();
AMessage.prototype = {
	_username: null,
	_password: null,
	_httpMethod: "get",
	_restMessage: null,
	_serverUrl: null,
	_resource: null,
	_queryParams: {},
	_pathParams: {},
	_postParams: {},
    initialize: function(server) {
		this._password = server.getPassword();
		this._username = server.getUsername();
		this._serverUrl = server.getUri();
		
		gs.debug("Username: " + this._username);
		gs.debug("Password: " + this._password);
		gs.debug("Server Url: " + this._serverUrl);
    },
	
	setHttpMethod: function(method){
			this._httpMethod = method;
	},
	
	setPathParameter: function(name, val){
		this._pathParams[name] = {name: name, value: val};
	},
	
	//NOT IMPLEMENTED
	setQueryParameter: function(name, val){
		this._queryParams[name] = {name: name, value: val};
	},
	
	
	//NOT IMPLEMENTED
	setPostParameter: function(name, val){
		this._postParams[name] = {name: name, value: val};
	},
	
	
	setResource: function(val){
		if(!gs.nil(val)){
			if(val.charAt(0) != '/')
				val = '/' + val;
			
			this._resource = val;
		}
	},
	
	execute: function(){
		return this._executeRestMessage();
		
	},
	
	_executeRestMessage: function(){
		this._initRestMessage();
		if(gs.nil(this._resource))
			throw 'Resource cannot be empty.  Please call setResource';
		
		this._restMessage.setEndpoint("${sn_internal_host}" + this._resource);
		this._setParameters();
		
		var resp = this._restMessage.execute();
		if(resp == null)
			throw 'Response is null';
		
		var statusCode = resp.getStatusCode();
		gs.debug("Status Code: " + statusCode);
		var result = {success: false};
		result.statusCode = statusCode;
		if(statusCode >= 200 && statusCode < 300){
			result.data = JSON.parse(resp.getBody());
			result.success = true;
		}
		
		return result;
	},
	
	_setParameters: function(){
		
		//Process path parameters
		this._restMessage.setStringParameter("sn_internal_host", this._serverUrl);
		
		for(var prop in this._pathParams){
			this._restMessage.setStringParameter(prop, this._pathParams[prop].value);
		}
	},
	
	_initRestMessage: function(){
		var mess = new sn_ws.RESTMessageV2();
		mess.setBasicAuth(this._username, this._password);
		mess.setHttpMethod(this._httpMethod);
		this._restMessage = mess;
		return this._restMessage;
	},
	
	
	
	
	

    type: 'AMessage'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-07-20 19:37:45</sys_created_on>
        <sys_id>15ea424e67400300cf1514db37415abf</sys_id>
        <sys_mod_count>18</sys_mod_count>
        <sys_name>AMessage</sys_name>
        <sys_package display_value="Ansible Tower Integration" source="sn_sc_ansible">f41f2dc267000300cf1514db37415a45</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Ansible Tower Integration">f41f2dc267000300cf1514db37415a45</sys_scope>
        <sys_update_name>sys_script_include_15ea424e67400300cf1514db37415abf</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-07-24 19:05:36</sys_updated_on>
    </sys_script_include>
</record_update>
